<?php
/**
 *
 * SugarCRM Community Edition is a customer relationship management program developed by
 * SugarCRM, Inc. Copyright (C) 2004-2013 SugarCRM Inc.
 *
 * SuiteCRM is an extension to SugarCRM Community Edition developed by SalesAgility Ltd.
 * Copyright (C) 2011 - 2018 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SUGARCRM, SUGARCRM DISCLAIMS THE WARRANTY
 * OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along with
 * this program; if not, see http://www.gnu.org/licenses or write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 *
 * You can contact SugarCRM, Inc. headquarters at 10050 North Wolfe Road,
 * SW2-130, Cupertino, CA 95014, USA. or at email address contact@sugarcrm.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License version 3,
 * these Appropriate Legal Notices must retain the display of the "Powered by
 * SugarCRM" logo and "Supercharged by SuiteCRM" logo. If the display of the logos is not
 * reasonably feasible for technical reasons, the Appropriate Legal Notices must
 * display the words "Powered by SugarCRM" and "Supercharged by SuiteCRM".
 */

class Veta_Requerimiento extends Basic
{
    #region Atributos
    public $new_schema  = true;
    public $module_dir  = 'Veta_Requerimiento';
    public $object_name = 'Veta_Requerimiento';
    public $table_name  = 'veta_requerimiento';
    public $importable  = false;

    public $id;
    public $name;
    public $date_entered;
    public $date_modified;
    public $modified_user_id;
    public $modified_by_name;
    public $created_by;
    public $created_by_name;
    public $description;
    public $deleted;
    public $created_by_link;
    public $modified_user_link;
    public $assigned_user_id;
    public $assigned_user_name;
    public $assigned_user_link;
    public $SecurityGroups;
    public $fuente;
    public $fecha_viaje_txt;
    public $fecha_viaje;
    public $presupuesto;
    public $visto_bueno_comercial;
    public $visto_bueno_visas;
    public $estado;
    public $fecha_proximo_contacto;
    public $fecha_ultimo_contacto;
    public $campaign_id_c;
    public $campana;
    public $referido;

    #endregion

    public function bean_implements( $interface )
    {
        switch ( $interface )
        {
            case 'ACL':
                return true;
        }
        return false;
    }

    /**
     * Este metodo obtiene el consecutivo para un nuevo registro
     *
     * @return int El proximo consecutivo
     */
    private function get_consecutive()
    {
        $index = 0;

        $results = $this->db->query( "SELECT MAX(CAST(name AS SIGNED)) AS max_name FROM veta_requerimiento LIMIT 1" );

        while ( $row = $this->db->fetchByAssoc( $results ) )
        {
            $index = $row[ 'max_name' ];
        }

        $index = ( $index * 1 ) + 1;

        return $index;
    }

    /**
     * Este metodo salva un requerimiento
     *
     * @param false $check_notify
     * @return string : Es el id del requerimiento recien salvado
     */
    public function save( $check_notify = false )
    {
        $this->asignar_comercial();

        $id = parent::save( $check_notify ); // TODO: Change the autogenerated stub

        if ( empty( $this->name ) )
        {
            $result     = $this->db->query( 'FLUSH TABLES WITH READ LOCK' );
            $this->name = $this->get_consecutive();
            $this->db->query( 'UNLOCK TABLES' );
            $this->db->query( "UPDATE veta_requerimiento SET name = '" . $this->name . "' WHERE id = '" . $id . "'" );
        }

        $this->relacionar_con_estudiante();
        return $id;
    }

    private function asignar_comercial()
    {
        if ( empty( $this->id ) and ! isset( $_REQUEST[ "relate_id" ] ) )
        {
            $usuarios = $usuarios2 = array();
            $campaign = new Campaign();
            $campaign->retrieve( $this->campaign_id_c );
            $campaign->load_relationship( 'prospectlists' );

            $target_lists = $campaign->prospectlists->getBeans();

            if ( count( $target_lists ) > 0 )
            {
                foreach ( $target_lists as $list )
                {
                    if ( $list->list_type == 'Comerciales' )
                    {
                        $q = "SELECT DISTINCT related_id AS USER_ID 
                                FROM prospect_lists_prospects 
                                INNER JOIN users ON users.id = prospect_lists_prospects.related_id AND prospect_lists_prospects.deleted = 0
                                WHERE related_type = 'Users' AND prospect_lists_prospects.prospect_list_id = '" . $list->id . "' AND users.status = 'Active' and users.deleted = 0";

                        $res = $this->db->query( $q, true, "Error los usuarios de la lista de publico objetivo : " );

                        while ( $row = $this->db->fetchByAssoc( $res ) )
                        {
                            array_push( $usuarios, $row[ 'USER_ID' ] );
                        }

                        $q = "SELECT DISTINCT related_id, COUNT(veta_requerimiento.id) AS CONT
                                FROM prospect_lists_prospects
                                INNER JOIN users ON users.id = prospect_lists_prospects.related_id AND prospect_lists_prospects.deleted = 0
                                LEFT JOIN veta_requerimiento ON veta_requerimiento.assigned_user_id = users.id AND veta_requerimiento.deleted = 0 
                                WHERE related_type = 'Users'
                                  AND prospect_list_id =  '" . $list->id . "'
                                  AND users.status = 'Active'
                                  AND users.deleted = 0
                                  AND veta_requerimiento.campaign_id_c =  '" . $campaign->id . "'
                                GROUP BY related_id
                                ORDER BY CONT DESC";

                        $res = $this->db->query( $q, true, "Error obteniendo el usuario : " );

                        while ( $row = $this->db->fetchByAssoc( $res ) )
                        {
                            array_push( $usuarios2, $row[ 'related_id' ] );
                            $this->assigned_user_id = $row[ 'related_id' ];
                        }

                        foreach ( $usuarios as $u )
                        {
                            if ( ! in_array( $u, $usuarios2 ) )
                            {
                                $this->assigned_user_id = $u;
                            }
                        }
                    }
                }
            }
        }
    }

    public function relacionar_con_estudiante()
    {
        $leads = $this->get_linked_beans( 'veta_requerimiento_leads', 'Lead' );

        foreach ( $leads as $lead )
        {

            if ( isset( $lead->contact_id ) )
            {
                $this->load_relationship( 'veta_requerimiento_contacts' );
                $this->veta_requerimiento_contacts->add( $lead->contact_id );
            }
        }
    }

    /**
     * Este metodo obtiene los requerimientos cuya fecha de expiracion de la visa es menor a 4 meses y el estado es largo plazo
     * @return array
     */
    public function getRequerimientosFechaExpiracionVencida( $meses )
    {
        $requerimientos_vencidos = array();

        // Obtenemos los requerimientos a largo plazo asociados con el prospecto
        $q = "SELECT veta_requerimiento.id FROM veta_requerimiento 
          INNER JOIN veta_requerimiento_leads_c ON veta_requerimiento_leads_c.veta_requerimiento_leadsveta_requerimiento_idb = veta_requerimiento.id and veta_requerimiento_leads_c.deleted = 0
          INNER JOIN leads ON leads.id = veta_requerimiento_leads_c.veta_requerimiento_leadsleads_ida AND leads.deleted = 0  
          INNER JOIN leads_cstm ON leads_cstm.id_c = leads.id AND leads_cstm.fecha_expiracion_visa_c IS NOT NULL
          WHERE veta_requerimiento.deleted = 0 AND veta_requerimiento.estado = 'Largo_Plazo' AND TIMESTAMPDIFF(MONTH,NOW(), leads_cstm.fecha_expiracion_visa_c) < " . $meses . " AND leads_cstm.fecha_expiracion_visa_c > NOW()";

        $db  = DBManagerFactory::getInstance();
        $res = $db->query( $q );

        while ( $row = $db->fetchByAssoc( $res ) )
        {
            $requerimiento = new Veta_Requerimiento();
            $requerimiento->retrieve( $row[ 'id' ] );
            $requerimientos_vencidos[ $row[ 'id' ] ] = $requerimiento;
        }

        $q = "SELECT veta_requerimiento.id FROM veta_requerimiento 
          INNER JOIN veta_requerimiento_contacts_c ON veta_requerimiento_contacts_c.veta_requerimiento_contactsveta_requerimiento_idb = veta_requerimiento.id and veta_requerimiento_contacts_c.deleted = 0
          INNER JOIN contacts ON contacts.id = veta_requerimiento_contacts_c.veta_requerimiento_contactscontacts_ida AND contacts.deleted = 0  
          INNER JOIN contacts_cstm ON contacts_cstm.id_c = contacts.id AND contacts_cstm.fecha_expiracion_visa_c IS NOT NULL
          WHERE veta_requerimiento.deleted = 0 AND veta_requerimiento.estado = 'Largo_Plazo' AND TIMESTAMPDIFF(MONTH, NOW(), contacts_cstm.fecha_expiracion_visa_c) < " . $meses . " AND contacts_cstm.fecha_expiracion_visa_c > NOW()";

        $db  = DBManagerFactory::getInstance();
        $res = $db->query( $q );

        while ( $row = $db->fetchByAssoc( $res ) )
        {
            $requerimiento = new Veta_Requerimiento();
            $requerimiento->retrieve( $row[ 'id' ] );
            $requerimientos_vencidos[ $row[ 'id' ] ] = $requerimiento;
        }

        return $requerimientos_vencidos;
    }

    /**
     * Este metodo obtiene los requerimientos cuya fecha de viaje no supera los X meses en el futuro y el estado es largo plazo
     * @return array
     */
    public function getRequerimientosFechaViajeVencida( $meses )
    {
        $_meses                  = 4;
        $requerimientos_vencidos = array();

        // Obtenemos los requerimientos a largo plazo asociados con el prospecto
        $q = "SELECT veta_requerimiento.id FROM veta_requerimiento 
          WHERE veta_requerimiento.deleted = 0 AND veta_requerimiento.estado = 'Largo_Plazo' AND 
          TIMESTAMPDIFF(MONTH,NOW(), fecha_viaje) < " . $_meses . " AND fecha_viaje > NOW()";

        $db  = DBManagerFactory::getInstance();
        $res = $db->query( $q );

        while ( $row = $db->fetchByAssoc( $res ) )
        {
            $requerimiento = new Veta_Requerimiento();
            $requerimiento->retrieve( $row[ 'id' ] );
            $requerimientos_vencidos[ $row[ 'id' ] ] = $requerimiento;
        }

        return $requerimientos_vencidos;
    }
}